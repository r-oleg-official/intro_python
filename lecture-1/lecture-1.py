# int, float, boolean, str, list, None
# None - уник знач-е, чтобы объявить переме-ю
# а потом по коду в дальнейшем использовать.
value = None # но такое скорее всего не понадобиться
a = 123     # int
b = 1.23    # float
print(a)
print(type(a))  # узнать тип переменной
print(b)
print(type(b)) 
print(value)
print(type(value))

# String
s = 'hello world'
print(s) # вывод строки
t = "hello 'world'"

# Escape-последовательности.
# \[symbol] - Escape-последовательности.
#  \' - обратный слэш, апостров - зеркалирование символа апострова'.
t = 'hello \'world' 
# \n - переход на новую строку

# Интерполяция.
print(a, b, s)
print(a, '-', b, '-', s) # добавить доп данные.
print('{} - {} - {}'.format(a, b, s)) # аналог вывод как в пред строке. Слава говорит,
# сейчас так не исп-ют.
print('{1} - {2} - {0}'.format(a, b, s)) # вывод в порядке: s, a, b.
print(f'{a} - {b} - {s}') # интерполяция.

# Логические переменные
f = True    # or False
print(f)

# Массивы. Списки. Списки заменяют массивы. 
# В Python массивов как таковых нет, а есть списки "list".
list = []   # объявление списка, пустого.
print(list) # вывод списка без заморочек
list = [1, 2, 3]
print(list)
list = ['1', '2', '3', 'hello']  # список строк
list = ['1', '2', '3', 'hello', 1, 2, 3, True]  # - это динам-я типизация, но так
# лучше не делать. Лучше в одном списке будут данные одного типа.
print(list)

list = [1, 2, 3]
# col = ['hello', 1, 2, 3] # - осторожно с пробелами, например, в начале строки.
# Ошибка: unexpected indent

# Ввод и вывод данных.
print('Enter a')
a = input()         # a = 10
print('Enter b')
b = input()         # b = 20
print(a, ' + ', b, ' = ', a + b)  # вывод будет строковый = 1020

print('Enter a')
a = int(input())         # a = 10. Тип: целочисленный
# a = float(input())     # тип: вещест-1 с плав точкой
print('Enter b')
b = int(input())         # b = 20
print(a, ' + ', b, ' = ', a + b)  # вывод будет строковый = 30

# Арифметические операции:
# +, -, *, /, % (остаток деления), //, **
# Приоритет операций:
# **, (+)(плюс в круге), (-), *, /, //, %, +, -
# () - скобки мменяют приоритет. 
a = 123
b = 321
c = a + b   # обычная сумма
print(c)
a = +123    # унарный плюс, в класс-й мат-ке и програм-ии не пишется, 
# но в прог-и может быть написан.
b = -121    # Унарный минус
c = a - b
c = a * b
c = a / b   # деление работает как для вещест-х чисел
print(c)
c = a // b  # чтобы получить деление в целых числах
print(c)
c = a % b   # остаток оот деления
print(c)
c = a ** b  # возведение в степенеь.
print(c)

# В Python техн-ки нет ограничения для хранения данных. В C# это 32/64 бита.
a = 1.3
b = 3
c = a * b   # ожидание 3.9, но...
print(c)    # 3.9000000000000004 - особен-сть хранения вещ-х чисел.
c = round(a * b) # по умол-ю, будет округление по мат-м правилам.
print(c)
a = 1.3123312223
b = 3
c = round(a * b, 5) # 5 - округление до 3-х знаков после запятой.
print(c)

# присвание
a = 3
a = a + 5
a +=5   # аналог-но предыдущему варианту
a *=5   # работает и с др. ариф операциями.

# Логические операции.
# >, >=, <, <=, ==, !=.
# not(отрицание), and (конъюкция, побитовая), or (дизъюнкция) 
# - не путать с & (И, в контексте логики), |, ^.
# Еще: is, is not, in, not in - Python's функционал.
# gen
a = 1 > 4
print(a)    # False
a = 1 < 4 and 5 > 2
print(a)    # True
a = 1 == 4
print(a)    # False
a = 1 != 4
print(a)    # True
a = 'qwe'
b = 'qwe'
print(a == b)   # True
a = [1, 2]  # список
b = [1, 2]
print(a == b)   # True. Сравнение списка поэлементно.
# Тройные и четверные неравенста.
a = 1 < 3 < 5   # 1 меньше 3 меньше 5
print(a)   # True
a = 1 < 3 < 5 < 10  # 1 меньше 3 меньше 5 меньше 10
print(a)   # True
# так можно потроллить С#-друга.
func = 1
T = 4
x = 123
print(func < T > (x)) # скобки (х) не нужны.
print(func < T > x) # False

func = 1
T = 4
x = 2
print(func < T > x) # True

f = 1 > 2 or 4 < 6  # дизъюнкция двух высказываний наз высказывание ИСТИНное, тогда
# и только тогда, когда одно из высказываний ИСТИНА.ы
print(f)    # True
f = [1, 2, 3, 4]
print(f)
print(2 in f)   # True. 2-ка содержится в списке "f".
print(not 2 in f) # False

# Проверка четности числа.

